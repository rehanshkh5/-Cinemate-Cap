{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nexport const useFetch = function (apiPath) {\n  _s();\n\n  let queryTerm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true); // Add loading state\n\n  const [error, setError] = useState(null); // Add error state\n\n  const url = `https://api.themoviedb.org/3/${apiPath}?api_key=${process.env.REACT_APP_API_KEY}&query=${queryTerm}`;\n  useEffect(() => {\n    let isMounted = true; // A flag to check if the component is still mounted\n\n    async function fetchMovies() {\n      try {\n        const response = await fetch(url);\n\n        if (!isMounted) {\n          return; // Prevent updating state if the component has unmounted\n        }\n\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n\n        const json = await response.json();\n        setData(json.results);\n        setLoading(false); // Set loading to false when data is fetched successfully\n      } catch (error) {\n        setError(error); // Handle and set the error state\n\n        setLoading(false); // Set loading to false on error\n      }\n    }\n\n    fetchMovies(); // Cleanup function to cancel the fetch if the component unmounts\n\n    return () => {\n      isMounted = false;\n    };\n  }, [url]);\n  return {\n    data,\n    loading,\n    error\n  };\n};\n\n_s(useFetch, \"C4fiAW6C7RZgaKDoEXQgZpbuUZg=\");","map":{"version":3,"names":["useState","useEffect","useFetch","apiPath","queryTerm","data","setData","loading","setLoading","error","setError","url","process","env","REACT_APP_API_KEY","isMounted","fetchMovies","response","fetch","ok","Error","json","results"],"sources":["D:/Project/Capstone Projact/cinemate-main/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport const useFetch = (apiPath, queryTerm = \"\") => {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true); // Add loading state\n  const [error, setError] = useState(null); // Add error state\n  const url = `https://api.themoviedb.org/3/${apiPath}?api_key=${process.env.REACT_APP_API_KEY}&query=${queryTerm}`;\n\n  useEffect(() => {\n    let isMounted = true; // A flag to check if the component is still mounted\n\n    async function fetchMovies() {\n      try {\n        const response = await fetch(url);\n\n        if (!isMounted) {\n          return; // Prevent updating state if the component has unmounted\n        }\n\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n\n        const json = await response.json();\n        setData(json.results);\n        setLoading(false); // Set loading to false when data is fetched successfully\n      } catch (error) {\n        setError(error); // Handle and set the error state\n        setLoading(false); // Set loading to false on error\n      }\n    }\n\n    fetchMovies();\n\n    // Cleanup function to cancel the fetch if the component unmounts\n    return () => {\n      isMounted = false;\n    };\n  }, [url]);\n\n  return { data, loading, error };\n};\n"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,QAAQ,GAAG,UAACC,OAAD,EAA6B;EAAA;;EAAA,IAAnBC,SAAmB,uEAAP,EAAO;EACnD,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC,CAFmD,CAEL;;EAC9C,MAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC,CAHmD,CAGT;;EAC1C,MAAMW,GAAG,GAAI,gCAA+BR,OAAQ,YAAWS,OAAO,CAACC,GAAR,CAAYC,iBAAkB,UAASV,SAAU,EAAhH;EAEAH,SAAS,CAAC,MAAM;IACd,IAAIc,SAAS,GAAG,IAAhB,CADc,CACQ;;IAEtB,eAAeC,WAAf,GAA6B;MAC3B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAD,CAA5B;;QAEA,IAAI,CAACI,SAAL,EAAgB;UACd,OADc,CACN;QACT;;QAED,IAAI,CAACE,QAAQ,CAACE,EAAd,EAAkB;UAChB,MAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;QACD;;QAED,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAT,EAAnB;QACAf,OAAO,CAACe,IAAI,CAACC,OAAN,CAAP;QACAd,UAAU,CAAC,KAAD,CAAV,CAbE,CAaiB;MACpB,CAdD,CAcE,OAAOC,KAAP,EAAc;QACdC,QAAQ,CAACD,KAAD,CAAR,CADc,CACG;;QACjBD,UAAU,CAAC,KAAD,CAAV,CAFc,CAEK;MACpB;IACF;;IAEDQ,WAAW,GAxBG,CA0Bd;;IACA,OAAO,MAAM;MACXD,SAAS,GAAG,KAAZ;IACD,CAFD;EAGD,CA9BQ,EA8BN,CAACJ,GAAD,CA9BM,CAAT;EAgCA,OAAO;IAAEN,IAAF;IAAQE,OAAR;IAAiBE;EAAjB,CAAP;AACD,CAvCM;;GAAMP,Q"},"metadata":{},"sourceType":"module"}